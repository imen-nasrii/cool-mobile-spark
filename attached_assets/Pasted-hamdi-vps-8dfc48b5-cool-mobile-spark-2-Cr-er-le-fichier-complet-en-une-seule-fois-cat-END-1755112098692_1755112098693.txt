hamdi@vps-8dfc48b5:~/cool-mobile-spark$ # 2. Créer le fichier complet en une seule fois
cat << 'ENDOFFILE' > server/objectStorage.ts
import { Response } from "express";
import { randomUUID } from "crypto";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export class ObjectNotFoundError extends Error {
  constructor() {
    super("Object not found");
    this.name = "ObjectNotFoundError";
    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);
  }
}

export class ObjectStorageService {
  private uploadsDir: string;

  constructor() {
    this.uploadsDir = path.join(__dirname, "../uploads");
    if (!fs.existsSync(this.uploadsDir)) {
      fs.mkdirSync(this.uploadsDir, { recursive: true });
    }
  }

  getPrivateObjectDir(): string {
    return this.uploadsDir;
  }

  async getObjectEntityUploadURL(): Promise<string> {
    const objectId = randomUUID();
    return `/api/objects/upload/${objectId}`;
  }

  async saveUploadedFile(objectId: string, buffer: Buffer, mimeType: string): Promise<string> {
    const extensions: { [key: string]: string } = {
      'image/jpeg': '.jpg',
      'image/jpg': '.jpg',
      'image/png': '.png',
      'image/gif': '.gif',
      'image/webp': '.webp'
    };
    const extension = extensions[mimeType] || '.jpg';
    const filename = `${objectId}${extension}`;
    const filePath = path.join(this.uploadsDir, filename);
ENDOFFILEparseObjectPath };objectName: fullPath };ageService();});'; = 3600) {
hamdi@vps-8dfc48b5:~/cool-mobile-spark$ # 3. Vérifier que le fichier est correct
echo "Lignes du fichier: $(wc -l < server/objectStorage.ts)"
echo "Dernières lignes:"
tail -3 server/objectStorage.ts
Lignes du fichier: 127
Dernières lignes:
}

export { parseObjectPath };
hamdi@vps-8dfc48b5:~/cool-mobile-spark$ # 4. Build et redémarrage final
npm run build
pm2 restart tomati-hamdi
sleep 3
pm2 logs tomati-hamdi --lines 5

> rest-express@1.0.0 build
> vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist

vite v5.4.14 building for production...
transforming (1) index.htmlBrowserslist: browsers data (caniuse-lite) is 10 months old. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
✓ 2680 modules transformed.
../dist/public/index.html                             1.38 kB │ gzip:   0.62 kB
../dist/public/assets/iphone-15-pro-DLnIGZxM.jpg     12.63 kB
../dist/public/assets/modern-sofa-Bot6_suo.jpg       42.19 kB
../dist/public/assets/tractor-holland-BVmO3lNy.jpg   45.21 kB
../dist/public/assets/motherboard-i5-DUzFb2hE.jpg    45.73 kB
../dist/public/assets/mountain-bike-D3qaVfHl.jpg     45.99 kB
../dist/public/assets/ad-2-DsZ3vHtJ.jpeg             49.32 kB
../dist/public/assets/tesla-model3-BDFc0W8h.jpg      54.60 kB
../dist/public/assets/ad-1-DAMbr7uR.jpeg             67.28 kB
../dist/public/assets/index-BCXJso9b.css            116.17 kB │ gzip:  23.56 kB
../dist/public/assets/index-D7cltdS5.js             890.07 kB │ gzip: 256.24 kB

(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
✓ built in 21.40s

  dist/index.js  79.8kb

⚡ Done in 28ms
Use --update-env to update environment variables
[PM2] Applying action restartProcessId on app [tomati-hamdi](ids: [ 0 ])
[PM2] [tomati-hamdi](0) ✓
┌────┬─────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name            │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼─────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 0  │ tomati-hamdi    │ default     │ 1.0.0   │ fork    │ 631320   │ 0s     │ 3    │ online    │ 0%       │ 15.1mb   │ hamdi    │ disabled │
└────┴─────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘
[TAILING] Tailing last 5 lines for [tomati-hamdi] process (change the value with --lines option)
/home/hamdi/cool-mobile-spark/logs/err-0.log last 5 lines:
0|tomati-h | 2025-08-13T18:59:04: Error getting upload URL: Error: Object storage not available on VPS
0|tomati-h | 2025-08-13T18:59:04:     at ObjectStorageService.getObjectEntityUploadURL (file:///home/hamdi/cool-mobile-spark/dist/index.js:40:15)
0|tomati-h | 2025-08-13T18:59:04:     at file:///home/hamdi/cool-mobile-spark/dist/index.js:1585:53
0|tomati-h | 2025-08-13T18:59:04:     at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
0|tomati-h | 2025-08-13T18:59:48: Error: ENOENT: no such file or directory, stat '/home/hamdi/cool-mobile-spark/dist/public/index.html'

/home/hamdi/cool-mobile-spark/logs/out-0.log last 5 lines:
0|tomati-h | 2025-08-13T18:59:04: 6:59:04 PM [express] POST /api/objects/upload 500 in 12ms :: {"error":"Object storage not available …
0|tomati-h | 2025-08-13T18:59:55: 6:59:55 PM [express] serving on port 5000
0|tomati-h | 2025-08-13T19:01:51: 7:01:51 PM [express] serving on port 5000
0|tomati-h | 2025-08-13T19:04:44: 7:04:44 PM [express] serving on port 5000
0|tomati-h | 2025-08-13T19:07:55: 7:07:55 PM [express] serving on port 5000
